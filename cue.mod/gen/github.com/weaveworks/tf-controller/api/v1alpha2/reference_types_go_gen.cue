// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/weaveworks/tf-controller/api/v1alpha2

package v1alpha2

import (
	"github.com/fluxcd/pkg/apis/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

// CrossNamespaceSourceReference contains enough information to let you locate the
// typed Kubernetes resource object at cluster level.
#CrossNamespaceSourceReference: {
	// API version of the referent.
	// +optional
	apiVersion?: string @go(APIVersion)

	// Kind of the referent.
	// +kubebuilder:validation:Enum=GitRepository;Bucket;OCIRepository
	// +required
	kind: string @go(Kind)

	// Name of the referent.
	// +required
	name: string @go(Name)

	// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
	// +optional
	namespace?: string @go(Namespace)
}

#FileMapping: {
	// Reference to a Secret that contains the file content
	secretRef: meta.#SecretKeyReference @go(SecretRef)

	// Location can be either user's home directory or the Terraform workspace
	// +kubebuilder:validation:Enum=home;workspace
	// +required
	location: string @go(Location)

	// Path of the file - relative to the "location"
	// +kubebuilder:validation:Pattern=`^(.?[/_a-zA-Z0-9]{1,})*$`
	// +required
	path: string @go(Path)
}

#BackendConfigsReference: {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	// +kubebuilder:validation:Enum=Secret;ConfigMap
	// +required
	kind: string @go(Kind)

	// Name of the configs referent. Should reside in the same namespace as the
	// referring resource.
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:MaxLength=253
	// +required
	name: string @go(Name)

	// Keys is the data key where a specific value can be found at. Defaults to all keys.
	// +optional
	keys?: [...string] @go(Keys,[]string)

	// Optional marks this BackendConfigsReference as optional. When set, a not found error
	// for the values reference is ignored, but any Key or
	// transient error will still result in a reconciliation failure.
	// +optional
	optional?: bool @go(Optional)
}

// VarsReference contain a reference of a Secret or a ConfigMap to generate
// variables for Terraform resources based on its data, selectively by varsKey.
#VarsReference: {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	// +kubebuilder:validation:Enum=Secret;ConfigMap
	// +required
	kind: string @go(Kind)

	// Name of the values referent. Should reside in the same namespace as the
	// referring resource.
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:MaxLength=253
	// +required
	name: string @go(Name)

	// VarsKeys is the data key at which a specific value can be found. Defaults to all keys.
	// +optional
	varsKeys?: [...string] @go(VarsKeys,[]string)

	// Optional marks this VarsReference as optional. When set, a not found error
	// for the values reference is ignored, but any VarsKey or
	// transient error will still result in a reconciliation failure.
	// +optional
	optional?: bool @go(Optional)
}

// HealthCheck contains configuration needed to perform a health check after
// terraform is applied.
#HealthCheck: {
	// Name of the health check.
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:MaxLength=253
	// +required
	name: string @go(Name)

	// Type of the health check, valid values are ('tcp', 'http').
	// If tcp is specified, address is required.
	// If http is specified, url is required.
	// +kubebuilder:validation:Enum=tcp;http
	// +required
	type: string @go(Type)

	// URL to perform http health check on. Required when http type is specified.
	// Go template can be used to reference values from the terraform output
	// (e.g. https://example.org, {{.output_url}}).
	// +optional
	url?: string @go(URL)

	// Address to perform tcp health check on. Required when tcp type is specified.
	// Go template can be used to reference values from the terraform output
	// (e.g. 127.0.0.1:8080, {{.address}}:{{.port}}).
	// +optional
	address?: string @go(Address)

	// The timeout period at which the connection should timeout if unable to
	// complete the request.
	// When not specified, default 20s timeout is used.
	// +kubebuilder:default="20s"
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)
}

#RunnerPodTemplate: {
	// +optional
	metadata?: #RunnerPodMetadata @go(Metadata)

	// +optional
	spec?: #RunnerPodSpec @go(Spec)
}

#RunnerPodMetadata: {
	// Labels to add to the runner pod
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// Annotations to add to the runner pod
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)
}

#RunnerPodSpec: {
	// Runner pod image to use other than default
	// +optional
	image?: string @go(Image)

	// List of sources to populate environment variables in the container.
	// The keys defined within a source must be a C_IDENTIFIER. All invalid keys
	// will be reported as an event when the container is starting. When a key exists in multiple
	// sources, the value associated with the last source will take precedence.
	// Values defined by an Env with a duplicate key will take precedence.
	// Cannot be updated.
	// +optional
	envFrom?: [...corev1.#EnvFromSource] @go(EnvFrom,[]corev1.EnvFromSource)

	// List of environment variables to set in the container.
	// Cannot be updated.
	// +optional
	// +patchMergeKey=name
	// +patchStrategy=merge
	env?: [...corev1.#EnvVar] @go(Env,[]corev1.EnvVar)

	// Set the NodeSelector for the Runner Pod
	// +optional
	nodeSelector?: {[string]: string} @go(NodeSelector,map[string]string)

	// Set the Affinity for the Runner Pod
	// +optional
	affinity?: null | corev1.#Affinity @go(Affinity,*corev1.Affinity)

	// Set the Tolerations for the Runner Pod
	// +optional
	tolerations?: [...corev1.#Toleration] @go(Tolerations,[]corev1.Toleration)

	// Set Volume Mounts for the Runner Pod
	// +optional
	volumeMounts?: [...corev1.#VolumeMount] @go(VolumeMounts,[]corev1.VolumeMount)

	// Set Volumes for the Runner Pod
	// +optional
	volumes?: [...corev1.#Volume] @go(Volumes,[]corev1.Volume)

	// Set up Init Containers for the Runner
	// +optional
	initContainers?: [...corev1.#Container] @go(InitContainers,[]corev1.Container)

	// Set host aliases for the Runner Pod
	// +optional
	hostAliases?: [...corev1.#HostAlias] @go(HostAliases,[]corev1.HostAlias)
}

#HealthCheckTypeTCP:     "tcp"
#HealthCheckTypeHttpGet: "http"
